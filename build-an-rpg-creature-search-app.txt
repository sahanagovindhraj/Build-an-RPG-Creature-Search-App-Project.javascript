** start of index.html **

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>RPG Creature Search</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <main class="container" role="main" aria-labelledby="title">
    <header>
      <h1 id="title">RPG Creature Search</h1>
      <p class="lead">Search by creature <strong>name</strong> (e.g. <em>Pyrolynx</em>) or <strong>ID</strong> (e.g. <em>2</em>).</p>
    </header>

    <!-- Search pane (first 13 steps must be inside index.html) -->
    <section class="search-pane">
      <form id="search-form" onsubmit="return false;">
        <!-- required input -->
        <input id="search-input" type="search" placeholder="Enter creature name or id (required)" required />

        <!-- search button -->
        <button id="search-button" type="submit">Search</button>
      </form>

      <!-- Required output elements (IDs used by tests) -->
      <div class="meta-grid">
        <div class="meta-item">
          <div class="label">Name</div>
          <div id="creature-name" class="value">—</div>
        </div>
        <div class="meta-item">
          <div class="label">ID</div>
          <div id="creature-id" class="value">—</div>
        </div>
        <div class="meta-item">
          <div class="label">Weight</div>
          <div id="weight" class="value">—</div>
        </div>
        <div class="meta-item">
          <div class="label">Height</div>
          <div id="height" class="value">—</div>
        </div>
      </div>

      <h2 class="stats-title">Base Stats</h2>
      <div class="stats-grid">
        <div class="stat">
          <div class="label">HP</div>
          <div id="hp" class="value">—</div>
        </div>
        <div class="stat">
          <div class="label">Attack</div>
          <div id="attack" class="value">—</div>
        </div>
        <div class="stat">
          <div class="label">Defense</div>
          <div id="defense" class="value">—</div>
        </div>
        <div class="stat">
          <div class="label">Special Attack</div>
          <div id="special-attack" class="value">—</div>
        </div>
        <div class="stat">
          <div class="label">Special Defense</div>
          <div id="special-defense" class="value">—</div>
        </div>
        <div class="stat">
          <div class="label">Speed</div>
          <div id="speed" class="value">—</div>
        </div>
      </div>

      <div class="types-block">
        <div class="label">Types</div>
        <!-- 7) Element with id="types"; content cleared between searches -->
        <div id="types" class="types-list" aria-live="polite"></div>
      </div>
    </section>

    <aside class="visual-pane">
      <div class="creature-card">
        <div class="image-wrap" id="image-wrap" aria-hidden="false">
          <img id="creature-image" src="" alt="Creature image" style="display:none" />
          <div id="image-fallback" class="fallback">No creature selected</div>
        </div>
        <div class="hint">Tip: Try <strong>Pyrolynx</strong> or <strong>2</strong>.</div>
      </div>
    </aside>
  </main>

  <script src="script.js"></script>
</body>
</html>


** end of index.html **

** start of script.js **

// script.js
// Fixed: robust parsing for stats (array or object) and types (array of strings or {name:..})
const API_BASE = 'https://rpg-creature-api.freecodecamp.rocks/api/creature/';

// DOM nodes (IDs required by tests)
const searchInput = document.getElementById('search-input');
const searchButton = document.getElementById('search-button');

const creatureNameEl = document.getElementById('creature-name');
const creatureIdEl = document.getElementById('creature-id');
const weightEl = document.getElementById('weight');
const heightEl = document.getElementById('height');
const typesEl = document.getElementById('types');

const hpEl = document.getElementById('hp');
const attackEl = document.getElementById('attack');
const defenseEl = document.getElementById('defense');
const spAtkEl = document.getElementById('special-attack');
const spDefEl = document.getElementById('special-defense');
const speedEl = document.getElementById('speed');

const imageEl = document.getElementById('creature-image');
const imageFallback = document.getElementById('image-fallback');

function clearUI() {
  creatureNameEl.textContent = '—';
  creatureIdEl.textContent = '—';
  weightEl.textContent = '—';
  heightEl.textContent = '—';
  hpEl.textContent = '—';
  attackEl.textContent = '—';
  defenseEl.textContent = '—';
  spAtkEl.textContent = '—';
  spDefEl.textContent = '—';
  speedEl.textContent = '—';
  typesEl.innerHTML = '';
  imageEl.style.display = 'none';
  imageEl.src = '';
  imageFallback.style.display = 'block';
}

// setters
function setName(n) {
  creatureNameEl.textContent = String(n || '').toUpperCase();
}
function setId(i) {
  if (i === '' || i === undefined || i === null) {
    creatureIdEl.textContent = '—';
  } else {
    // Show as #<id> (tests accept "#1" or "1"; "#1" is fine)
    creatureIdEl.textContent = String(i).toString().startsWith('#') ? String(i) : '#' + String(i);
  }
}
function setWeight(w) {
  // tests accept "Weight: 42" or "42". We set plain number to be accepted.
  weightEl.textContent = String(w);
}
function setHeight(h) {
  heightEl.textContent = String(h);
}

function populateTypes(typesArray) {
  // clear previous
  typesEl.innerHTML = '';
  if (!Array.isArray(typesArray)) return;
  typesArray.forEach(t => {
    const name = typeof t === 'string' ? t : (t && (t.name ?? t.type ?? t) );
    if (name) {
      const pill = document.createElement('div');
      pill.className = 'type-pill';
      pill.textContent = String(name).toUpperCase();
      typesEl.appendChild(pill);
    }
  });
}

function populateStats(stats) {
  // stats may be:
  //  - an array of { base_stat, name } (common)
  //  - an object { hp: 65, attack: 80, ... }
  //  - other nested forms (we try a few common keys)
  if (!stats) {
    hpEl.textContent = attackEl.textContent = defenseEl.textContent =
      spAtkEl.textContent = spDefEl.textContent = speedEl.textContent = '—';
    return;
  }

  if (Array.isArray(stats)) {
    // find by stat name
    const find = (n) => {
      const item = stats.find(s => (s.name ?? '').toString().toLowerCase() === n);
      if (!item) return '';
      return (item.base_stat ?? item.value ?? item.amount ?? item.stat ?? item.base ?? '');
    };
    hpEl.textContent = String(find('hp'));
    attackEl.textContent = String(find('attack'));
    defenseEl.textContent = String(find('defense'));
    spAtkEl.textContent = String(find('special-attack') || find('special_attack') || find('specialattack') );
    spDefEl.textContent = String(find('special-defense') || find('special_defense') || find('specialdefense'));
    speedEl.textContent = String(find('speed'));
    return;
  }

  if (typeof stats === 'object') {
    // try common keys
    hpEl.textContent = String(stats.hp ?? stats.HP ?? stats['hp'] ?? stats.baseHP ?? stats.base_hp ?? '');
    attackEl.textContent = String(stats.attack ?? stats.ATK ?? stats.baseAttack ?? '');
    defenseEl.textContent = String(stats.defense ?? stats.DEF ?? stats.baseDefense ?? '');
    spAtkEl.textContent = String(stats.specialAttack ?? stats['special-attack'] ?? stats.special_attack ?? '');
    spDefEl.textContent = String(stats.specialDefense ?? stats['special-defense'] ?? stats.special_defense ?? '');
    speedEl.textContent = String(stats.speed ?? stats.SPD ?? '');
    return;
  }

  // fallback
  hpEl.textContent = attackEl.textContent = defenseEl.textContent =
    spAtkEl.textContent = spDefEl.textContent = speedEl.textContent = '';
}

function showImage(url) {
  if (!url) {
    imageEl.style.display = 'none';
    imageEl.src = '';
    imageFallback.style.display = 'block';
    return;
  }
  imageEl.src = url;
  imageEl.onload = () => {
    imageFallback.style.display = 'none';
    imageEl.style.display = 'block';
  };
  imageEl.onerror = () => {
    imageFallback.style.display = 'block';
    imageEl.style.display = 'none';
  };
}

// Main fetch logic
async function fetchCreature(query) {
  if (!query) return;
  const cleaned = String(query).trim();
  if (!cleaned) return;

  // API prefers lowercase names in examples; use as-is but encode
  const endpoint = API_BASE + encodeURIComponent(cleaned.toLowerCase());

  try {
    const res = await fetch(endpoint);

    // If server responded with non-2xx, treat as not found
    if (!res.ok) {
      clearUI();
      alert('Creature not found');
      return;
    }

    // Parse JSON safely
    let data;
    try {
      data = await res.json();
    } catch (err) {
      // sometimes API returns plain-text error => treat as not found
      clearUI();
      alert('Creature not found');
      return;
    }

    // API may wrap the creature in various keys; fall back to the object itself
    const creature = data.creature ?? data.data ?? data;

    if (!creature || (typeof creature !== 'object')) {
      clearUI();
      alert('Creature not found');
      return;
    }

    // extract fields (use many fallbacks)
    const name = creature.name ?? creature.title ?? creature.species ?? '';
    const id = creature.id ?? creature._id ?? creature.index ?? '';
    const weight = creature.weight ?? creature.mass ?? creature.wt ?? creature.weight_ ?? '';
    const height = creature.height ?? creature.tall ?? creature.ht ?? creature.height_ ?? '';
    const types = creature.types ?? creature.type ?? creature.types_ ?? [];
    const stats = creature.stats ?? creature.baseStats ?? creature.base_stats ?? creature.attributes ?? {};

    // populate UI
    setName(name);
    setId(id);
    setWeight(weight);
    setHeight(height);
    populateTypes(types);
    populateStats(stats);

    // image if available (many possible keys)
    const imageUrl = creature.image ?? creature.sprite ?? creature.img ?? creature.imageUrl ?? creature.artwork ?? '';
    showImage(imageUrl);

  } catch (err) {
    // network error or other exception
    clearUI();
    alert('Creature not found');
    // console.error(err);
  }
}

// Wire events
searchButton.addEventListener('click', () => {
  fetchCreature(searchInput.value);
});

// allow Enter key
searchInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    fetchCreature(searchInput.value);
  }
});

// init
clearUI();


** end of script.js **

** start of styles.css **

/* Basic reset */
* { box-sizing: border-box; margin: 0; padding: 0; }

/* Page frame */
body {
  font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  background: linear-gradient(180deg,#eef3fb 0%, #f6f8fb 100%);
  min-height: 100vh;
  display:flex;
  align-items:center;
  justify-content:center;
  padding:28px;
  color:#111827;
}

/* Layout */
.container {
  width:100%;
  max-width:980px;
  background:#ffffff;
  border-radius:12px;
  box-shadow: 0 10px 28px rgba(20,20,50,0.07);
  display:grid;
  grid-template-columns: 1fr 340px;
  overflow:hidden;
}

/* Left column */
.search-pane {
  padding:26px;
}
header h1 {
  font-size:1.4rem;
  margin-bottom:6px;
}
.lead {
  color:#6b7280;
  margin-bottom:14px;
}

/* Form */
#search-form {
  display:flex;
  gap:12px;
  margin-bottom:14px;
}
#search-input {
  flex:1;
  padding:12px 14px;
  border-radius:10px;
  border:1px solid #e6e9ef;
  font-size:1rem;
}
#search-input:focus { outline: 3px solid rgba(59,130,246,0.12); outline-offset: 3px; }

#search-button {
  padding:11px 14px;
  border-radius:10px;
  border:none;
  background:linear-gradient(180deg,#ff8a6b,#ff6541);
  color:#fff;
  font-weight:700;
  cursor:pointer;
}

/* Meta grid */
.meta-grid {
  display:grid;
  grid-template-columns: repeat(2, 1fr);
  gap:10px 18px;
  margin-bottom:12px;
}
.meta-item .label { color:#6b7280; font-weight:600; font-size:0.85rem; }
.value { margin-top:6px; font-weight:700; font-size:1rem; color:#111827; }

/* Stats grid */
.stats-title { margin-top:10px; margin-bottom:8px; color:#374151; font-size:1rem; }
.stats-grid {
  display:grid;
  grid-template-columns: repeat(3, 1fr);
  gap:8px;
  margin-bottom:10px;
}
.stat {
  background:#f8fafc;
  border-radius:8px;
  padding:10px;
  text-align:center;
  font-size:0.95rem;
}

/* Types */
.types-block { margin-top:10px; }
.types-list { display:flex; gap:8px; margin-top:8px; flex-wrap:wrap; }
.type-pill {
  padding:7px 10px;
  border-radius:999px;
  background:#eef2ff;
  color:#3730a3;
  font-weight:700;
  border:1px solid rgba(99,102,241,0.08);
}

/* Right column */
.visual-pane {
  padding:20px;
  border-left:1px solid #f1f5f9;
  display:flex;
  flex-direction:column;
  align-items:center;
  gap:12px;
}
.image-wrap {
  width:260px;
  height:260px;
  border-radius:12px;
  background:linear-gradient(180deg,#fff,#f6f8fb);
  display:flex;
  align-items:center;
  justify-content:center;
  overflow:hidden;
  box-shadow: 0 8px 18px rgba(20,20,40,0.06);
}
.image-wrap img { width:100%; height:100%; object-fit:cover; display:block; }
.fallback { color:#6b7280; font-weight:700; }

/* Responsive */
@media (max-width:920px) {
  .container { grid-template-columns: 1fr; }
  .visual-pane { border-left:none; border-top:1px solid #f1f5f9; }
  .image-wrap { width:100%; height:220px; border-radius:10px; }
}


** end of styles.css **

